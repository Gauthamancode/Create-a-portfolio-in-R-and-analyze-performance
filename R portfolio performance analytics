library(dplyr)
library(quantmod)
library(PerformanceAnalytics)
library(imputeTS)
library(PortfolioAnalytics)

tickers <- c("FB", "AAPL", "AMZN", "NFLX")
weights <- c(.25, .25, .25, .25)

#Get Prices (can be monthly or weekly)
portfolioPrices <- NULL
for (Ticker in tickers)
  portfolioPrices <- cbind(portfolioPrices,
                           getSymbols.yahoo(Ticker, from="2016-01-01", periodicity = "daily", auto.assign=FALSE)[,4])

benchmarkPrices <- getSymbols.yahoo("SPY", from="2016-01-01", periodicity = "daily", auto.assign=FALSE)[,4]
colSums(is.na(benchmarkPrices))
benchmarkReturns <- na.omit(ROC(benchmarkPrices, type="discrete"))


#Rename Columns
colnames(portfolioPrices) <- tickers

#Get sum of NA per column
colSums(is.na(portfolioPrices))

#Plot
plot(portfolioPrices, legend = tickers)


#Calculate Returns For DF
dailyReturns <- na.omit(ROC(portfolioPrices, type="discrete"))

#Calculate Portfolio Returns
portfolioReturn <- Return.portfolio(dailyReturns, weights=weights)



#Plot Performance
chart.CumReturns(portfolioReturn)
charts.PerformanceSummary(portfolioReturn)

#Calculate Metrics 
CAPM.beta(portfolioReturn, benchmarkReturns, .035/252)
CAPM.beta.bull(portfolioReturn, benchmarkReturns, .035/252)
CAPM.beta.bear(portfolioReturn, benchmarkReturns, .035/252)

#CAPM.alpha(portfolioReturn, benchmarkReturns, .035/252)
CAPM.jensenAlpha(portfolioReturn, benchmarkReturns, .035/252)

SharpeRatio(portfolioReturn, Rf = .035/252, p = 0.95, FUN = "StdDev",
            weights = NULL, annualize = FALSE)

table.AnnualizedReturns(portfolioReturn, Rf=.035/252, geometric=TRUE)













OUTPUT : 

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

Warning message:
package ‘dplyr’ was built under R version 4.0.2 
> library(quantmod)
Loading required package: xts
Loading required package: zoo

Attaching package: ‘zoo’

The following objects are masked from ‘package:base’:

    as.Date, as.Date.numeric


Attaching package: ‘xts’

The following objects are masked from ‘package:dplyr’:

    first, last

Loading required package: TTR
Registered S3 method overwritten by 'quantmod':
  method            from
  as.zoo.data.frame zoo 
Version 0.4-0 included new data defaults. See ?getSymbols.
> library(PerformanceAnalytics)

Attaching package: ‘PerformanceAnalytics’

The following object is masked from ‘package:graphics’:

    legend

> library(imputeTS)

Attaching package: ‘imputeTS’

The following object is masked from ‘package:zoo’:

    na.locf

Warning message:
package ‘imputeTS’ was built under R version 4.0.2 
> library(PortfolioAnalytics)
Loading required package: foreach
Warning messages:
1: package ‘PortfolioAnalytics’ was built under R version 4.0.2 
2: package ‘foreach’ was built under R version 4.0.2 
> 
> tickers <- c("FB", "AAPL", "AMZN", "NFLX")
> weights <- c(.25, .25, .25, .25)
> 
> #Get Prices (can be monthly or weekly)
> portfolioPrices <- NULL
> for (Ticker in tickers)
+   portfolioPrices <- cbind(portfolioPrices,
+                            getSymbols.yahoo(Ticker, from="2016-01-01", periodicity = "daily", auto.assign=FALSE)[,4])
> 
> benchmarkPrices <- getSymbols.yahoo("SPY", from="2016-01-01", periodicity = "daily", auto.assign=FALSE)[,4]
> colSums(is.na(benchmarkPrices))
SPY.Close 
        0 
> benchmarkReturns <- na.omit(ROC(benchmarkPrices, type="discrete"))
> 
> 
> #Rename Columns
> colnames(portfolioPrices) <- tickers
> 
> #Get sum of NA per column
> colSums(is.na(portfolioPrices))
  FB AAPL AMZN NFLX 
   0    0    0    0 
> 
> #Plot
> plot(portfolioPrices, legend = tickers)
> 
> 
> #Calculate Returns For DF
> dailyReturns <- na.omit(ROC(portfolioPrices, type="discrete"))
> 
> #Calculate Portfolio Returns
> portfolioReturn <- Return.portfolio(dailyReturns, weights=weights)
> 
> #Plot Performance
> chart.CumReturns(portfolioReturn)
> charts.PerformanceSummary(portfolioReturn)
> 
> #Calculate Metrics 
> CAPM.beta(portfolioReturn, benchmarkReturns, .035/252)
[1] 1.029028
> CAPM.beta.bull(portfolioReturn, benchmarkReturns, .035/252)
[1] 0.9219706
> CAPM.beta.bear(portfolioReturn, benchmarkReturns, .035/252)
[1] 0.9656779
> 
> #CAPM.alpha(portfolioReturn, benchmarkReturns, .035/252)
> CAPM.jensenAlpha(portfolioReturn, benchmarkReturns, .035/252)
[1] 0.2379929
> 
> SharpeRatio(portfolioReturn, Rf = .035/252, p = 0.95, FUN = "StdDev",
+             weights = NULL, annualize = FALSE)
                              portfolio.returns
StdDev Sharpe (Rf=0%, p=95%):        0.07177147
> 
> table.AnnualizedReturns(portfolioReturn, Rf=.035/252, geometric=TRUE)
                            portfolio.returns
Annualized Return                      0.3571
Annualized Std Dev                     0.2694
Annualized Sharpe (Rf=3.5%)            1.1526
